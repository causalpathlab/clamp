load_all()
res_cl3 <- clamp(X, y, W=Wmat,
standardize = F,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl3, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl3)
res_cl2 <- clamp(X, y, W=Wmat,
standardize = T,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl2, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl2)
l <- 1
plot(res_cl3$alpha[l,], res_cl2$alpha[l,])
l <- 2
plot(res_cl3$alpha[l,], res_cl2$alpha[l,])
prior_varB <- var(y) * 0.2
post_varB_cl2 <- res_cl2$mu2 - res_cl2$mu^2
shat2_cl2 <- 1/(1/post_varB_cl2 - 1/prior_varB)
shat2_cl2 <- 1/sweep(1/post_varB_cl2, 1, 1/prior_varB, "-"))
shat2_cl2 <- 1/sweep(1/post_varB_cl2, 1, 1/prior_varB, "-")
shat2_cl2 <- 1/sweep(1/post_varB_cl2, 2, 1/prior_varB, "-")
1/prior_varB
1/post_varB_cl2
post_varB_cl3 <- res_cl3$mu2 - res_cl3$mu^2
shat2_cl3 <- 1/sweep(1/post_varB_cl2, 2, 1/prior_varB, "-")
plot(shat2_cl2, shat2_cl3)
abline(0,1)
shat2_cl3 <- 1/sweep(1/post_varB_cl3, 2, 1/prior_varB, "-")
plot(shat2_cl2, shat2_cl3)
abline(0,1)
load_all()
res_cl3 <- clamp(X, y, W=Wmat,
standardize = F,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl3, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl3)
res_cl2 <- clamp(X, y, W=Wmat,
standardize = T,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl2, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl2)
rm(shat2_cl2)
rm(shat2_cl3)
rm(alpha_scaled, alpha_unscaled)
rm(bb_scaled, bb_unscaled)
l <- 1
plot(res_cl3$alpha[l,], res_cl2$alpha[l,])
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
l <- 2
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
l <- 3
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
l <- 4
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
summary(lm(res_cl3$shat2[1,] ~ res_cl2$shat2[1,]))
summary(lm(res_cl3$shat2[2,] ~ res_cl2$shat2[2,]))
load_all()
res_cl3 <- clamp(X, y, W=Wmat,
standardize = F,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl3, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl3)
res_cl2 <- clamp(X, y, W=Wmat,
standardize = T,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl2, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl2)
load_all()
res_cl3 <- clamp(X, y, W=Wmat,
standardize = F,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl3, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl3)
res_cl2 <- clamp(X, y, W=Wmat,
standardize = T,
mle_estimator = "WLS",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
clamp_plot(res_cl2, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_cl2)
load_all()
plot(res_cl3$betahat[1,], res_cl2$betahat[1,])
plot(res_cl3$betahat[2,], res_cl2$betahat[2,])
plot(res_cl3$betahat[3,], res_cl2$betahat[3,])
plot(res_cl3$betahat[1,] / res_cl2$betahat[1,])
plot(res_cl3$betahat[2,] / res_cl2$betahat[2,])
plot(res_cl3$betahat[1,], res_cl2$betahat[1,])
abline(0, 0.5)
plot(res_cl2$betahat[1,]/ res_cl3$betahat[1,])
plot(res_cl2$betahat[1,]/ res_cl3$betahat[1,], sapply(1:ncol(W), function(j) weightedSd(y,W[,j])))
plot(res_cl2$betahat[1,]/ res_cl3$betahat[1,], sapply(1:ncol(W), function(j) weightedSd(X[,j],W[,j])))
abline(0,1)
l <- 1
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
l <- 1
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
l <- 1
plot(res_cl3$shat2[l,]*0.025, res_cl2$shat2[l,])
abline(0,1)
zscore2_cl3 <- res_cl3$betahat^2 / res_cl3$shat2
zscore2_cl2 <- res_cl2$betahat^2 / res_cl2$shat2
plot(zscore2_cl3, zscore2_cl2)
summary(lm(c(zscore2_cl3) ~ c(zscore2_cl2)))
l <- 1
plot(res_cl3$shat2[l,]*0.25, res_cl2$shat2[l,])
# abline(0,1)
abline(0,1)
l <- 1
plot(res_cl3$shat2[l,]*0.25, res_cl2$shat2[l,])
abline(0,1)
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
abline(0,1)
plot(res_cl3$shat2[l,], res_cl2$shat2[l,])
abline(0,1)
plot(c(res_cl3$betahat), c(res_cl2$betahat))
summary(lm(c(res_cl3$betahat) ~ c(res_cl2$betahat)))
summary(lm(c(res_cl3$shat2) ~ c(res_cl2$shat2)))
plot(c(res_cl3$shat2), c(res_cl2$shat2))
set.seed(107108)
nn <- 100
pp <- 2
h2 <- 1
U <- rnorm(nn)
zeta <- ( (1:pp) - (pp+1)/2 ) / (pp+1)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- sample.int(pp, size = 1)
coefs <- append(rep(1, times = length(causal_vars)), 1)
y <- sqrt(h2) * cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) + sqrt(1-h2) * esp
zeta
zeta <- ( (1:pp) - pp/2 ) / (pp+1)
zeta
# zeta <- ( (1:pp) - pp/2 ) / (pp+1)
zeta <- rnorm(pp)
# zeta <- ( (1:pp) - pp/2 ) / (pp+1)
zeta <- rnorm(pp, sd = 2)
zeta
causal_vars
##
PS <- sapply(1:ncol(X),
function(j) predict(glm(X[,j] ~ U, family = binomial), type = "response"))
Wmat <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(Wmat)
res_lm1 <- lm(y ~ X, weights = Wmat)
rm(Wmat)
X_ <- sapply(1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]))
W <- ifelse(X == 1, 1/PS, 1/(1-PS))
X_ <- sapply(1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]))
y_ <- sapply(1:ncol(W), function(j) y - weighted.mean(y, W[,j]) )
wxy <- colSums(W * X_ * y_)
wx2  <- colSums(W * X_^2)
betahat <- wxy / wx2
######################
## Q1: How standardization affects the bootstrap variances?
nboot <- 100
betahat
boot_betahat <- matrix(NA, nrow = nboot, ncol = ncol(X))
for (B in 1 : nboot) {
ind <- sample.int(nrow(X), size = nrow(X), replace = T)
Xboot <- X[ind, , drop=F]
yboot <- y[ind]
Wboot <- W[ind, , drop=F]
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot[,j] - weighted.mean(Xboot[,j], Wboot[,j]))
yboot_ <- sapply(1:ncol(Wboot),
function(j) yboot - weighted.mean(yboot, Wboot[,j]))
wxy <- colSums(Wboot * Xboot_ * yboot_)
wx2 <- colSums(Wboot * Xboot_^2)
boot_betahat[B, ] <- wxy / wx2
}
boot_var <- colVars(boot_betahat)
boot_var
res_lm1 <- lm(y ~ X[,1], weights = W[,1])
summary(res_lm1)
res_lm2 <- lm(y ~ X[,2], weights = W[,2])
summary(res_lm2)
coefficients(res_lm1)
coefint(res_lm1)
confint(res_lm1)
summary(res_lm1)$coefficients
summary(res_lm1)$coefficients[2,1:2]
res_lm2 <- lm(y ~ X[,2], weights = W[,2])
summary(res_lm2)$coeffcients[2,1:2]
summary(res_lm2)$coefficients[2,1:2]
betahat_exact <- matrix(NA, nrow = ncol(X), ncol = 2,
dimnames = list(paste0("X", 1:ncol(X)),
c("Estimate", "SE")))
betahat_exact
for (j in 1 : ncol(X)) {
res_lm <- lm(y ~ X[,j], weights = W[,j])
betahat_exact <- summary(res_lm)$coefficients[2,1:2]
}
betahat_exact
for (j in 1 : ncol(X)) {
res_lm <- lm(y ~ X[,j], weights = W[,j])
betahat_exact[j, ] <- summary(res_lm)$coefficients[2,1:2]
}
betahat_exact <- matrix(NA, nrow = ncol(X), ncol = 2,
dimnames = list(paste0("X", 1:ncol(X)),
c("Estimate", "SE")))
for (j in 1 : ncol(X)) {
res_lm <- lm(y ~ X[,j], weights = W[,j])
betahat_exact[j, ] <- summary(res_lm)$coefficients[2,1:2]
}
betahat_exact
betahat_bs1 <- matrix(t(cbind(betahat, sqrt(boot_var))))
betahat_bs
betahat_bs1
betahat_bs1 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs1
betahat_exact <- data.frame(Estimate = rep(NA, times = ncol(X)),
SE = rep(NA, times = ncol(X)),
row.names = paste0("X", 1:ncol(X)))
for (j in 1 : ncol(X)) {
res_lm <- lm(y ~ X[,j], weights = W[,j])
betahat_exact[j, ] <- summary(res_lm)$coefficients[2,1:2]
}
betahat_exact <- as.data.frame(betahat_exact)
betahat_exact
betahat_bs1
X_ <- sapply( 1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]) )
X_ <- sapply( 1:ncol(W), function(j) X_[,j] / weightedSd(X[,j], W[,j]) )
y_ <- sapply( 1:ncol(W), function(j) y - weighted.mean(y, W[,j]) )
wxy <- colSums(W * X_ * y_)
wx2  <- colSums(W * X_^2)
betahat <- wxy / wx2
boot_betahat <- matrix(NA, nrow = nboot, ncol = ncol(X))
for (B in 1 : nboot) {
ind <- sample.int(nrow(X), size = nrow(X), replace = T)
Xboot <- X[ind, , drop=F]
yboot <- y[ind]
Wboot <- W[ind, , drop=F]
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot[,j] - weighted.mean(Xboot[,j], Wboot[,j]))
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot_[,j] / weightedSd(Xboot[,j], Wboot[,j]))
yboot_ <- sapply(1:ncol(Wboot),
function(j) yboot - weighted.mean(yboot, Wboot[,j]))
wxy <- colSums(Wboot * Xboot_ * yboot_)
wx2 <- colSums(Wboot * Xboot_^2)
boot_betahat[B, ] <- wxy / wx2
}
boot_var <- colVars(boot_betahat)
betahat_bs2 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs2
## convert back to the original scale
XcolSds <- sapply( 1:ncol(W), function(j) weightedSd(X[,j], W[,j]))
XcolSds
?sweep
A <- array(1:24, dim = 4:2)
A
sweep(A, 1, 5)
sweep(betahat_bs2, 2, XcolSds, "/")
betahat_bs1
set.seed(107108109)
nn <- 100
pp <- 2
h2 <- 1
U <- rnorm(nn)
zeta <- rnorm(pp)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- 1
coefs <- append(rep(1, times = length(causal_vars)), 1)
y <- sqrt(h2) * cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) +
sqrt(1-h2) * esp
##
PS <- sapply(1:ncol(X),
function(j) predict(glm(X[,j] ~ U, family = binomial), type = "response"))
W <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(W)
betahat_exact <- data.frame(Estimate = rep(NA, times = ncol(X)),
SE = rep(NA, times = ncol(X)),
row.names = paste0("X", 1:ncol(X)))
for (j in 1 : ncol(X)) {
res_lm <- lm(y ~ X[,j], weights = W[,j])
betahat_exact[j, ] <- summary(res_lm)$coefficients[2,1:2]
}
betahat_exact
### Bootstrap with Unstandardized X
nboot <- 100
X_ <- sapply( 1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]) )
y_ <- sapply( 1:ncol(W), function(j) y - weighted.mean(y, W[,j]) )
wxy <- colSums(W * X_ * y_)
wx2  <- colSums(W * X_^2)
betahat <- wxy / wx2
boot_betahat <- matrix(NA, nrow = nboot, ncol = ncol(X))
for (B in 1 : nboot) {
ind <- sample.int(nrow(X), size = nrow(X), replace = T)
Xboot <- X[ind, , drop=F]
yboot <- y[ind]
Wboot <- W[ind, , drop=F]
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot[,j] - weighted.mean(Xboot[,j], Wboot[,j]))
yboot_ <- sapply(1:ncol(Wboot),
function(j) yboot - weighted.mean(yboot, Wboot[,j]))
wxy <- colSums(Wboot * Xboot_ * yboot_)
wx2 <- colSums(Wboot * Xboot_^2)
boot_betahat[B, ] <- wxy / wx2
}
boot_var <- colVars(boot_betahat)
betahat_bs1 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs1
X_ <- sapply( 1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]) )
X_ <- sapply( 1:ncol(W), function(j) X_[,j] / weightedSd(X[,j], W[,j]) )
y_ <- sapply( 1:ncol(W), function(j) y - weighted.mean(y, W[,j]) )
wxy <- colSums(W * X_ * y_)
wx2  <- colSums(W * X_^2)
betahat <- wxy / wx2
boot_betahat <- matrix(NA, nrow = nboot, ncol = ncol(X))
for (B in 1 : nboot) {
ind <- sample.int(nrow(X), size = nrow(X), replace = T)
Xboot <- X[ind, , drop=F]
yboot <- y[ind]
Wboot <- W[ind, , drop=F]
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot[,j] - weighted.mean(Xboot[,j], Wboot[,j]))
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot_[,j] / weightedSd(Xboot[,j], Wboot[,j]))
yboot_ <- sapply(1:ncol(Wboot),
function(j) yboot - weighted.mean(yboot, Wboot[,j]))
wxy <- colSums(Wboot * Xboot_ * yboot_)
wx2 <- colSums(Wboot * Xboot_^2)
boot_betahat[B, ] <- wxy / wx2
}
boot_var <- colVars(boot_betahat)
betahat_bs2 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs2
#### convert back to the original scale
XcolSds <- sapply( 1:ncol(W), function(j) weightedSd(X[,j], W[,j]))
sweep(betahat_bs2, 2, XcolSds, "/")
betahat_bs1
betahat_exact
set.seed(107108109110)
set.seed(107110)
nn <- 1000  ## 10 times the sample size of Q1
pp <- 2
h2 <- 1
U <- rnorm(nn)
zeta <- rnorm(pp)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- 1
coefs <- append(rep(1, times = length(causal_vars)), 1)
y <- sqrt(h2) * cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) +
sqrt(1-h2) * esp
##
PS <- sapply(1:ncol(X),
function(j) predict(glm(X[,j] ~ U, family = binomial), type = "response"))
W <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(W)
### Bootstrap with Unstandardized X
nboot <- 100
X_ <- sapply( 1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]) )
y_ <- sapply( 1:ncol(W), function(j) y - weighted.mean(y, W[,j]) )
wxy <- colSums(W * X_ * y_)
wx2  <- colSums(W * X_^2)
betahat <- wxy / wx2
betahat
boot_betahat <- matrix(NA, nrow = nboot, ncol = ncol(X))
for (B in 1 : nboot) {
ind <- sample.int(nrow(X), size = nrow(X), replace = T)
Xboot <- X[ind, , drop=F]
yboot <- y[ind]
Wboot <- W[ind, , drop=F]
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot[,j] - weighted.mean(Xboot[,j], Wboot[,j]))
yboot_ <- sapply(1:ncol(Wboot),
function(j) yboot - weighted.mean(yboot, Wboot[,j]))
wxy <- colSums(Wboot * Xboot_ * yboot_)
wx2 <- colSums(Wboot * Xboot_^2)
boot_betahat[B, ] <- wxy / wx2
}
boot_var <- colVars(boot_betahat)
betahat_bs1 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs3 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs3
set.seed(107108109)
nn <- 100
pp <- 2
h2 <- 1
U <- rnorm(nn)
zeta <- rnorm(pp)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- 1
coefs <- append(rep(1, times = length(causal_vars)), 1)
y <- sqrt(h2) * cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) +
sqrt(1-h2) * esp
##
PS <- sapply(1:ncol(X),
function(j) predict(glm(X[,j] ~ U, family = binomial), type = "response"))
W <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(W)
### Bootstrap with Unstandardized X
nboot <- 100
X_ <- sapply( 1:ncol(W), function(j) X[,j] - weighted.mean(X[,j], W[,j]) )
y_ <- sapply( 1:ncol(W), function(j) y - weighted.mean(y, W[,j]) )
wxy <- colSums(W * X_ * y_)
wx2  <- colSums(W * X_^2)
betahat <- wxy / wx2
boot_betahat <- matrix(NA, nrow = nboot, ncol = ncol(X))
for (B in 1 : nboot) {
ind <- sample.int(nrow(X), size = nrow(X), replace = T)
Xboot <- X[ind, , drop=F]
yboot <- y[ind]
Wboot <- W[ind, , drop=F]
Xboot_ <- sapply(1:ncol(Wboot),
function(j) Xboot[,j] - weighted.mean(Xboot[,j], Wboot[,j]))
yboot_ <- sapply(1:ncol(Wboot),
function(j) yboot - weighted.mean(yboot, Wboot[,j]))
wxy <- colSums(Wboot * Xboot_ * yboot_)
wx2 <- colSums(Wboot * Xboot_^2)
boot_betahat[B, ] <- wxy / wx2
}
boot_var <- colVars(boot_betahat)
betahat_bs1 <- data.frame(Estimate = betahat, SE = sqrt(boot_var))
betahat_bs1
betahat_bs3
betahat
betahat / XcolSds
boot_betahat
sweep(boot_betahat, 2, XcolSds, "/")
sweep(boot_betahat, 2, c(0, 1), "*")
load_all()
rm(list = ls())
set.seed(107108)
nn <- 100
# pp <- 1000
pp <- 10
h2 <- 1
U <- rnorm(nn)
zeta <- ( (1:pp) - pp/2 ) / (pp+1)
# zeta <- rnorm(pp, sd = 1)
# zeta <- rep(0, times = pp)
# hist(zeta)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
# hist(cor(Pmat), breaks = seq(-1, 1, by = 0.1))
# corrplot(cor(Pmat), type = "upper")
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- sample.int(pp, size = 5)
# coefs <- rnorm(length(causal_vars) + 1)
coefs <- append(rep(1, times = length(causal_vars)), 1)
y <- sqrt(h2) * cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) + sqrt(1-h2) * esp
print(data.frame(variable = c(paste0("X", causal_vars), "U"),
effect_size = coefs))
Uhat <- rsvd(X, k=3)$u
PS <- sapply(1:ncol(X),
function(j) predict(glm(X[,j] ~ Uhat, family = binomial), type = "response"))
Uhat <- rsvd(X, k=3)$u
PS <- sapply(1:ncol(X),
function(j) predict(glm(X[,j] ~ Uhat, family = binomial), type = "response"))
zeta
Wmat <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(Wmat)
res_cl1 <- clamp(X, y, W=Wmat,
standardize = F,
mle_estimator = "mHT",
max_iter = 1,
maxL = 10,
seed = 123,
verbose = T)
