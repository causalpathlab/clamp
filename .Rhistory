eloglik <- sum(alpha * (rep((-n/2)*log(2*pi*residual_variance), times = p) + 1/2*colSums(log(W)))) -
residual_variance/2 * EWRSS
eloglik
library(devtools)
use_r(model_weighted_linear)
use_r("model_weighted_linear")
?is.null
alpha*(-n/2)*log(2*pi*residual_variance)
(-n/2)*log(2*pi*residual_variance)*alpha
c((-n/2)*log(2*pi*residual_variance))*alpha
1/2*colSums(log(W)))*alpha
1/2*colSums(log(W))*alpha
load_all()
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
aa <- sweep(X, 2, scaled_center, "-") / sweep(X, 2, scaled_scale, "/")
scaled_center = sapply(1:p, function(j) weighted.mean(x=X[,j], w=W[,j]))
scaled_scale = sapply(1:p, function(j) weightedSd(x=X[,j], w=W[,j]))
sweep(X, 2, scaled_center, "-") / sweep(X, 2, scaled_scale, "/")
aa <- sweep(X, 2, scaled_center, "-")
X[1:10]
X[1:5, 1:5]
scaled_center[1:5]
scaled_scale
Y = sweep(X, 2, scaled_center, "-")
Y = sweep(Y, 2, scaled_scale, "/")
Y
Y <- y
X_ = sweep(X, 2, scaled_center, "-")
X_ = sweep(X_, 2, scaled_scale, "/")
load_all()
load_all()
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all
load_all()
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_bs)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
summarize_coefficients(res_bs)
res_sw <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "sandwich",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
verbose = T
)
summarize_coefficients(res_sw)
clamp_plot(res_sw, y = "PIP", effect_indices = causal_vars)
plot(res_bs$alpha[1])
plot(res_bs$alpha[1,])
plot(res_bs$alpha[2,])
plot(res_bs$alpha[3,])
plot(res_bs$alpha[4,])
plot(res_bs$alpha[5,])
plot(res_bs$alpha[6,])
plot(res_bs$alpha[7,])
plot(res_bs$alpha[8,])
plot(res_bs$alpha[9,])
plot(res_bs$alpha[10,])
plot(res_bs$elbo)
plot(res_bs$EWRSS)
plot(res_bs$loglik)
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
# estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
# estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
# estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
load_all()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
# estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
summarize_coefficients(res_bs)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
coefs
plot(res_bs$elbo)
plot(res_bs$loglik)
plot(res_bs$EWRSS)
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
plot(res_bs$elbo)
set.seed(20241108)
nn <- 500
pp <- 20
U <- rnorm(nn, mean =1)
# zeta <- c(rnorm(pp/2, mean = -0.5, sd = 1),
#           rnorm(pp/2, mean = 0.8, sd = 1))
zeta <- ((1:pp) -(pp/2)) / (pp+2)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + 0.5*delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
corPmat <- cor(Pmat)
diag(corPmat) <- 0
hist(corPmat, breaks = seq(-1, 1, by = 0.1))
hist(Pmat)
# corrplot(cor(Pmat), type = "upper")
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- sample.int(pp, size = 3)
# coefs <- rep(1, times = length(causal_vars) + 1)
coefs <- rnorm(length(causal_vars) + 1)
y <- cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) + esp
print(data.frame(variable = c(paste0("X", causal_vars), "U"),
effect_size = coefs))
### Step 1: estimate the propensity scores and construct the weight matrix
PS <- apply(X, 2, function(xcol)
predict(glm(xcol ~ U, family = binomial), type = "response"))
Wmat <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(Wmat)
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 30,
seed = 12345,
nboots = 100,
verbose=T
)
toc <- Sys.time()
toc - tic
summarize_coefficients(res_bs)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
plot(res_bs$elbo)
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 50,
seed = 12345,
nboots = 100,
verbose=T
)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
tic <- Sys.time()
res_sw <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "sandwich",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
verbose = T
)
toc <- Sys.time()
toc - tic
summarize_coefficients(res_sw)
clamp_plot(res_sw, y = "PIP", effect_indices = causal_vars)
coefs
summarize_coefficients(res_bs)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
set.seed(20241108)
nn <- 500
pp <- 100
U <- rnorm(nn, mean =1)
# zeta <- c(rnorm(pp/2, mean = -0.5, sd = 1),
#           rnorm(pp/2, mean = 0.8, sd = 1))
zeta <- ((1:pp) -(pp/2)) / (pp+2)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + 0.5*delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
corPmat <- cor(Pmat)
diag(corPmat) <- 0
hist(corPmat, breaks = seq(-1, 1, by = 0.1))
hist(Pmat)
# corrplot(cor(Pmat), type = "upper")
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
causal_vars <- sample.int(pp, size = 3)
# coefs <- rep(1, times = length(causal_vars) + 1)
coefs <- rnorm(length(causal_vars) + 1)
y <- cbind(X[, causal_vars, drop=F], U) %*% as.matrix(coefs) + esp
print(data.frame(variable = c(paste0("X", causal_vars), "U"),
effect_size = coefs))
### Step 1: estimate the propensity scores and construct the weight matrix
PS <- apply(X, 2, function(xcol)
predict(glm(xcol ~ U, family = binomial), type = "response"))
Wmat <- ifelse(X == 1, 1/PS, 1/(1-PS))
range(Wmat)
tic <- Sys.time()
res_nv <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "naive",
# max_iter = 3,
standardize = F,
# estimate_prior_variance = F, estimate_residual_variance = F,
verbose=T)
toc <- Sys.time()
toc - tic
summarize_coefficients(res_nv)
clamp_plot(res_nv, y = "PIP", effect_indices = causal_vars)
load_all()
load_all()
res_nv <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "naive",
# max_iter = 3,
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
verbose=T)
tic <- Sys.time()
res_nv <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "naive",
# max_iter = 3,
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
verbose=T)
toc <- Sys.time()
toc - tic
summarize_coefficients(res_nv)
clamp_plot(res_nv, y = "PIP", effect_indices = causal_vars)
tic <- Sys.time()
res_sw <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "sandwich",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
verbose = T
)
toc <- Sys.time()
toc - tic
summarize_coefficients(res_sw)
clamp_plot(res_sw, y = "PIP", effect_indices = causal_vars)
tic <- Sys.time()
res_bs <- clamp(X, y, W=Wmat, family = "linear",
mle_variance_estimator = "bootstrap",
standardize = F,
# estimate_prior_variance = F,
estimate_residual_variance = F,
max_iter = 50,
seed = 12345,
nboots = 100,
verbose=T
)
toc <- Sys.time()
toc - tic
summarize_coefficients(res_bs)
clamp_plot(res_bs, y = "PIP", effect_indices = causal_vars)
plot(res_bs$elbo)
plot(res_bs$elbo, type = "l")
plot(res_bs$elbo, type = "o")
0.956 * 3691
5040/5270 * 3691
3691 - 5040/5270 * 3691
rm(list = ls())
Y <- matrix(c(3547, 926, 382, 185, 144, 49, 27, 10), nrow = 2, byrow = T)
Y
pie1 <- sum(Y[1,]) / sum(Y)
colSums(Y) * sum(Y[1,]) / sum(Y)
E <- matrix(c(colSums(Y) * sum(Y[1,])/sum(Y),
colSums(Y) * (1 - sum(Y[1,]/sum(Y))),
nrow = 2, byrow = T))
E
colSums(Y) * sum(Y[1,])/sum(Y),
c(colSums(Y) * sum(Y[1,])/sum(Y),
colSums(Y) * (1 - sum(Y[1,]/sum(Y))
)
c(colSums(Y) * sum(Y[1,])/sum(Y),
E <- rbind(colSums(Y) * sum(Y[1,])/sum(Y), colSums(Y) * (1 - sum(Y[1,]/sum(Y))
)
)
E
rbind(colSums(Y) * sum(Y[1,])/sum(Y), colSums(Y) * (1 - sum(Y[1,])/sum(Y))
)
Y
rm(pie1)
chi2 <- (Y - E)^2 / E
chi2
chi2 <- sum((Y - E)^2 / E)
chi2
?pchisq
plot(dchisq(seq(0.01, 10, by = 0.01), df = 3))
plot(dchisq(seq(0.01, 10, by = 0.01), df = 3), type = "l")
x <- seq(0.01, 10, by = 0.01)
plot(x, dchisq(x, df = 3), type = "l")
rm(list = ls())
set.seed(112112)
nn <- 800
pp <- 2
U <- rnorm(nn, mean = 3)
# zeta <- rnorm(pp, sd = 1)
zeta <- c(-0.4, 0.5)
delta <- matrix(rnorm(nn*pp, 0, 0.1), nrow=nn)
UU <- (outer(U, zeta) + delta)[, , drop=F]
Pmat <- expit(UU)  # Prob matrix
# hist(cor(Pmat), breaks = seq(-1, 1, by = 0.1))
# hist(Pmat)
# corrplot(cor(Pmat), type = "upper")
X <- sapply(1:pp, function(j) {rbinom(nn, 1, Pmat[,j])})
X <- apply(X, 2, as.double)
esp <- rnorm(nn)
# causal_vars <- sample.int(pp, size = 5)
causal_vars <- 1
# coefs <- rnorm(4)
coefs <- rep(1, times = length(causal_vars) + 1)
y <- cbind(X[, causal_vars, drop=F], X[,causal_vars] * U) %*% as.matrix(coefs) + esp
PS <- apply(X, 2, function(xcol)
predict(glm(xcol ~ U, family = binomial), type = "response"))
Wmat <- ifelse(X == 1, 1/PS, 1/(1-PS))
res_x1 <- lm(y ~ X[,1], weights = Wmat[, 1])
summary(res_x1)
coefficients(res_x1)
res_x2 <- lm(y ~ X[, 2], weights = Wmat[, 2])
summary(res_x2)
coefficients(res_x2)
EY1.x1 <- sum(Wmat * X[,1] * y) / sum(Wmat * X[,1])
EY1.x1 <- sum(Wmat[,1] * X[,1] * y) / sum(Wmat[,1] * X[,1])
EY0.x1 <- sum(Wmat[,1] * (1-X[,1]) * y) / sum(Wmat[,1] * (1-X[,1]))
EY1.x1 - EY0.x1
coefficients(res_x1)
EY1.x2 <- sum(Wmat[,2] * X[,2] * y) / sum(Wmat[,2] * X[,2])
EY0.x2 <- sum(Wmat[,2] * (1-X[,2]) * y) / sum(Wmat[,2] * (1-X[,2]))
EY1.x2 - EY0.x2
y1 <- 1 * 1 + X2 + 1 * 1 * U + esp
y1 <- 1 * 1 + X[,2] + 1 * 1 * U + esp
y0 <- 1 * 0 + X[,2] + 1 * 0 * U + esp
mean(y1 - y0)
coefficients(res_x1)
qchisq(0.95, 1)
setwd("~/Desktop/TA/STAT306-2024W2/Labs/lab2")
# Read the data
hubble = read.table("Hubble.txt", header=TRUE)
x = hubble$distance
y = hubble$velocity
# Create the scatterplot
plot(x, y, xlab="Distance (millions of light years)", ylab="Velocity (1000 km/s)")
# Compute statistics
n = length(x)
xbar = mean(x)
ybar = mean(y)
sx = sqrt( (sum((x-xbar)^2) / (n-1) ))
sy = sqrt( (sum((y-ybar)^2) / (n-1) ))
sxy = sum( (x-xbar)*(y-ybar) ) / (n-1)
rxy = sxy / (sx * sy)
# Compute the least squares slope estimate
b1 = sxy / sx^2
b1
# Fit the model using lm
reg = lm(y~x)
summary(reg)
# Extract residuals and compute sum
res = reg$residuals
round(sum(res), 4)
# Create residual scatterplots
plot(x, res, xlab="Distance (millions of light years)", ylab="Residuals (1000 km/s)")
plot(reg$fitted.values, res, xlab="Velocity (millions of light years)", ylab="Residuals (1000 km/s)")
# Create QQ plot
qqnorm(res)
qqline(res)
# Construct 95% confidence interval
qnorm(0.95)
qnorm(0.975)
qt(0.95,n-2)
n = length(x)
s = summary(reg)$sigma
n
rm(list = ls())
